version: '3.8'

services:
  db:
    image: postgres:13
    container_name: postgres_db
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: django_user
      POSTGRES_PASSWORD: django_password
      POSTGRES_DB: django_db
      POSTGRES_HOST: "localhost"
    ports:
      - "5431:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U django_user -d django_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build: .
    container_name: django_app
    command: >
      sh -c " python manage.py makemigrations register && 
              python manage.py migrate register &&
              python manage.py migrate &&
              python manage.py collectstatic --no-input &&
              python manage.py makemigrations &&
              python manage.py makemigrations backend &&
              python manage.py migrate &&
              python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - POSTGRES_DB=django_db
      - POSTGRES_USER=django_user
      - POSTGRES_PASSWORD=django_password

  api:
    build: .
    container_name: telegram_bot_api
    command: python /app/TelegramBot/api.py
    volumes:
      - .:/app
    ports:
      - "8081:8081"
    environment:
      DB_HOST: db
      DB_PORT: 5432
      POSTGRES_DB: django_db
      POSTGRES_USER: django_user
      POSTGRES_PASSWORD: django_password
      PYTHONUNBUFFERED: 1
    restart: always
    depends_on:
      - db
      - web

  bot:
    build: .
    container_name: telegram_bot
    command: python /app/TelegramBot/main.py
    volumes:
      - .:/app
    environment:
      DB_HOST: db
      DB_PORT: 5432
      POSTGRES_DB: django_db
      POSTGRES_USER: django_user
      POSTGRES_PASSWORD: django_password
      PYTHONUNBUFFERED: 1
    restart: always
    depends_on:
      - db
      - web
      - api

volumes:
  postgres_data: