<!-- Отправка в ТГ мема и сохранение его в профиле -->

    <!-- C воркерами -->
    <!-- <script type="module">
        import { WorkerPool } from "{% static 'js/workerPool.js' %}";

        const pool = new WorkerPool("{% static 'js/image-compression-worker.js' %}", 1);

        const sendToTelegram = document.getElementById('sendToTelegram');
        if (sendToTelegram) {
            sendToTelegram.addEventListener('click', sendToTelegramfunc);
        }

        function sendToTelegramfunc() {
            const target = document.querySelector('.upload-inner');
            if (!target) {
                console.error('Элемент .upload-inner не найден');
                return;
            }


            const spinner = document.getElementById('loading-spinner');
            spinner.style.display = 'flex'; // показать спиннер

            const toHide = target.querySelectorAll('div[style*="position: absolute"] > div');
            const hiddenElements = [];
            toHide.forEach(el => {
                hiddenElements.push({ element: el, display: el.style.display });
                el.style.display = 'none';
            });

            const containers = target.querySelectorAll('div[style*="position: absolute"]');
            const containerStyles = [];
            containers.forEach(el => {
                containerStyles.push({
                    element: el,
                    border: el.style.border,
                    boxShadow: el.style.boxShadow,
                    transform: el.style.transform
                });
                el.style.border = 'none';
                el.style.boxShadow = 'none';
            });

            // Убрать рамку у самой .upload-inner
            const originalBorder = target.style.border;
            target.style.border = 'none';

            setTimeout(() => {
                html2canvas(target, {
                    useCORS: true,
                    backgroundColor: null,
                    scale: 1.2
                }).then(canvas => {
                    const worker = new Worker("{% static 'js/image-compression-worker.js' %}");
                    canvas.toBlob(async (blob) => {
                        try {
                            const compressedBlob = await pool.runTask(blob);

                            const formData = new FormData();
                            formData.append('file', compressedBlob, 'meme.jpg');

                            if ({{ user.is_authenticated|yesno:"true,false" }}) {
                                Promise.all([
                                    fetch('/save_meme_to_profile/', {
                                        method: 'POST',
                                        headers: { 'X-CSRFToken': '{{ csrf_token }}' },
                                        body: formData
                                    }),
                                    fetch('/send_meme_to_telegram/', {
                                        method: 'POST',
                                        headers: { 'X-CSRFToken': '{{ csrf_token }}' },
                                        body: formData
                                    })
                                ]).then(([profileRes, telegramRes]) => Promise.all([profileRes.json(), telegramRes.json()]))
                                .then(([profileData, telegramData]) => {
                                    spinner.style.display = 'none';
                                    if (telegramData.success) {
                                        alert("Мем отправлен в Telegram и сохранён в профиль!");
                                    } else {
                                        alert('Ошибка отправки в Telegram: ' + (telegramData.error || 'неизвестная'));
                                    }
                                }).catch(err => {
                                    spinner.style.display = 'none';
                                    console.error(err);
                                });
                            } else {
                                sendToTelegramNow(formData).finally(() => {
                                    spinner.style.display = 'none';
                                });
                            }
                        } catch (err) {
                            console.error("Ошибка при сжатии изображения:", err);
                            alert("Ошибка при сжатии изображения: " + err.message);
                            spinner.style.display = 'none';
                        }
                    }, 'image/png');
                });

                hiddenElements.forEach(({ element, display }) => {
                    element.style.display = display;
                });
                containerStyles.forEach(({ element, border, boxShadow }) => {
                    element.style.border = border;
                    element.style.boxShadow = boxShadow;
                });

                target.style.border = originalBorder; // восстановить рамку

            }, 50);
        }

        function sendToTelegramNow(formData) {
            fetch('/send_meme_to_telegram/', {
                method: 'POST',
                headers: { 'X-CSRFToken': '{{ csrf_token }}' },
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(`Мем отправлен в Telegram${isAuthenticated ? " и сохранён в профиль" : ""}!`);
                } else {
                    alert('Ошибка при отправке в Telegram: ' + (data.error || 'неизвестная'));
                }
            })
            .catch(error => console.error('Ошибка:', error));
        }
    </script> -->