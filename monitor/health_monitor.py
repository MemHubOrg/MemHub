import docker
import os
import requests
import time
import logging
import re
import threading

from collections import defaultdict
from datetime import datetime, timedelta
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
S3_HEALTH_URL = os.getenv("S3_HEALTH_URL")

# –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
CONTAINERS = ["telegram_bot", "telegram_bot_api", "django_app", "postgres_db"]
DOCKER_SOCKET_PATH = "/var/run/docker.sock"
client = docker.DockerClient(base_url='unix:///var/run/docker.sock')

# –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Ö–æ–¥–∞
LOG_FILE = '/app/logs/auth.log'
FAILED_ATTEMPTS_THRESHOLD = 3
RESET_INTERVAL_MINUTES = 1

# –§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ –≤ –ª–æ–≥–µ
log_pattern = re.compile(r"Authentication failed for (\w+) from (\d+\.\d+\.\d+\.\d+)")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
failed_attempts = {}

def check_container_health(container_name):
    try:
        container = client.containers.get(container_name)
        health = container.attrs['State'].get('Health')
        return health.get('Status') == "healthy"
    except Exception as e:
        return False

def check_s3():
    try:
        response = requests.head(S3_HEALTH_URL, timeout=5)
        return response.status_code == 200
    except Exception:
        return False

def send_telegram_alert(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "HTML"
    }
    try:
        requests.post(url, data=data, timeout=5)
    except Exception as e:
        print("Failed to send Telegram alert:", e)

def monitor_containers():
    if not os.path.exists(DOCKER_SOCKET_PATH):
        print(f"Docker socket not found at {DOCKER_SOCKET_PATH}")
        send_telegram_alert("‚ùå Docker socket –Ω–µ –Ω–∞–π–¥–µ–Ω. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
        return

    while True:
        problems = []

        for container in CONTAINERS:
            if not check_container_health(container):
                problems.append(f"‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä <b>{container}</b> –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

        if not check_s3():
            problems.append("‚ùå S3-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

        if problems:
            message = "‚ö†Ô∏è <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã:</b>\n" + "\n".join(problems)
            send_telegram_alert(message)

        time.sleep(30)

def monitor_log():
    try:
        with open(LOG_FILE, "r") as f:
            f.seek(0, 2)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            send_telegram_alert("–ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")

            while True:
                line = f.readline()
                if not line:
                    time.sleep(1)
                    continue

                match = log_pattern.search(line)
                if match:
                    username, ip = match.groups()
                    now = datetime.now()

                    if ip not in failed_attempts:
                        failed_attempts[ip] = []

                    # –£–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
                    failed_attempts[ip] = [ts for ts in failed_attempts[ip] if now - ts < timedelta(minutes=RESET_INTERVAL_MINUTES)]
                    failed_attempts[ip].append(now)

                    count = len(failed_attempts[ip])
                    if count >= FAILED_ATTEMPTS_THRESHOLD:
                        message = f"üö® {count} –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{username}</b> —Å IP <b>{ip}</b>"
                        send_telegram_alert(message)
                time.sleep(0.1)
    except FileNotFoundError:
        send_telegram_alert(f"‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {LOG_FILE}")

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –ø–æ—Ç–æ–∫–∞
    t1 = threading.Thread(target=monitor_log, daemon=True)
    t2 = threading.Thread(target=monitor_containers, daemon=True)

    t1.start()
    t2.start()

    # –ß—Ç–æ–±—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫
    t1.join()
    t2.join()